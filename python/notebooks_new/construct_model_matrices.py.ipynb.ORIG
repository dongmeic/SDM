{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "README.rmd             \u001b[34mcluster\u001b[m\u001b[m                input_data_1998.csv\r\n",
      "\u001b[34mXy_internal_split_data\u001b[m\u001b[m \u001b[34mdev\u001b[m\u001b[m\r\n"
     ]
    }
   ],
   "source": [
    "!ls ../../data/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train:\n",
      "  ['X_train_2003.csv', 'X_train_2009.csv'] \n",
      "  ['y_train_2003.csv', 'y_train_2009.csv']\n",
      "Valid:\n",
      "  ['X_valid_2003.csv', 'X_valid_2009.csv'] \n",
      "  ['y_valid_2003.csv', 'y_valid_2009.csv']\n",
      "Test:\n",
      "  ['X_test_2003.csv', 'X_test_2009.csv'] \n",
      "  ['y_test_2003.csv', 'y_test_2009.csv']\n"
     ]
    }
   ],
   "source": [
    "DATA_DIR = '../../data/Xy_internal_split_data'\n",
    "train_X_files = sorted([f for f in os.listdir(DATA_DIR) if 'X_train' in f])\n",
    "valid_X_files = sorted([f for f in os.listdir(DATA_DIR) if 'X_valid' in f])\n",
    "test_X_files  = sorted([f for f in os.listdir(DATA_DIR) if 'X_test' in f])\n",
    "train_y_files = sorted([f for f in os.listdir(DATA_DIR) if 'y_train' in f])\n",
    "valid_y_files = sorted([f for f in os.listdir(DATA_DIR) if 'y_valid' in f])\n",
    "test_y_files  = sorted([f for f in os.listdir(DATA_DIR) if 'y_test' in f])\n",
    "\n",
    "print('Train:\\n ', train_X_files, '\\n ', train_y_files)\n",
    "print('Valid:\\n ', valid_X_files, '\\n ', valid_y_files)\n",
    "print('Test:\\n ',  test_X_files,  '\\n ', test_y_files)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def load_data_set(set_files):\n",
    "    print('Loading data from %s...' % set_files)\n",
    "    data_set = pd.read_csv('%s/%s' % (DATA_DIR, set_files.pop()))\n",
    "    for f in set_files:\n",
    "        next_chunk = pd.read_csv('%s/%s' % (DATA_DIR, f))\n",
    "        data_set = data_set.append(next_chunk)\n",
    "    data_set.index = range(data_set.shape[0])\n",
    "    return data_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading data from ['X_train_2003.csv', 'X_train_2009.csv']...\n",
      "Loading data from ['X_valid_2003.csv', 'X_valid_2009.csv']...\n",
      "Loading data from ['X_test_2003.csv', 'X_test_2009.csv']...\n",
      "Loading data from ['y_train_2003.csv', 'y_train_2009.csv']...\n",
      "Loading data from ['y_valid_2003.csv', 'y_valid_2009.csv']...\n",
      "Loading data from ['y_test_2003.csv', 'y_test_2009.csv']...\n"
     ]
    }
   ],
   "source": [
    "X_train = load_data_set(train_X_files)\n",
    "X_valid = load_data_set(valid_X_files)\n",
    "X_test  = load_data_set(test_X_files)\n",
    "y_train = load_data_set(train_y_files)\n",
    "y_valid = load_data_set(valid_y_files)\n",
    "y_test  = load_data_set(test_y_files)\n",
    "\n",
    "data_sets = [[X_train, y_train], [X_valid, y_valid], [X_test, y_test]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "SQUARE = [\n",
    "    'lon', 'lat', 'etopo1', 'age', 'density', 'JanTmin', 'MarTmin', \n",
    "    'TMarAug', 'summerTmean', 'AugTmean', 'AugTmax', 'GSP', 'PMarAug',\n",
    "    'summerP0', 'OctTmin', 'fallTmean', 'winterTmin', 'Tmin', 'Tmean', \n",
    "    'Tvar', 'TOctSep', 'summerP1', 'summerP2', 'Pmean', 'POctSep', \n",
    "    'PcumOctSep', 'PPT', 'ddAugJul', 'ddAugJun']\n",
    "CUBE = ['age', 'density', 'summerP0', 'summerP1', 'summerP2']\n",
    "INTERACTIONS = [\n",
    "    'lon:lat', 'lon:etopo1', 'lon:JanTmin', 'lon:GSP', 'lon:Tvar', \n",
    "    'lon:Pmean', 'lon:POctSep', 'lon:PcumOctSep', 'lon:PPT', 'lat:etopo1',\n",
    "    'lat:density', 'lat:JanTmin', 'lat:MarTmin', 'lat:TMarAug', \n",
    "    'lat:AugTmax', 'lat:PMarAug', 'lat:summerP0', 'lat:OctTmin', \n",
    "    'lat:fallTmean', 'lat:winterTmin', 'lat:Tmin', 'lat:Tmean', \n",
    "    'lat:TOctSep', 'lat:summerP1', 'lat:summerP2', 'etopo1:age', \n",
    "    'etopo1:MarTmin', 'etopo1:summerP0', 'etopo1:winterTmin', \n",
    "    'etopo1:Tmin', 'etopo1:Tmean', 'etopo1:TOctSep', 'etopo1:summerP2', \n",
    "    'density:JanTmin', 'density:MarTmin', 'density:TMarAug',\n",
    "    'density:AugTmax', 'density:PMarAug', 'density:summerP0', \n",
    "    'density:OctTmin', 'density:fallTmean', 'density:winterTmin',\n",
    "    'density:Tmin', 'density:Tmean', 'density:TOctSep', 'density:summerP1',\n",
    "    'density:summerP2', 'JanTmin:MarTmin', 'JanTmin:summerP0', \n",
    "    'JanTmin:OctTmin', 'JanTmin:fallTmean', 'JanTmin:winterTmin', \n",
    "    'JanTmin:Tmin', 'JanTmin:Tmean', 'JanTmin:TOctSep', 'JanTmin:summerP1',\n",
    "    'JanTmin:summerP2', 'JanTmin:Pmean', 'JanTmin:POctSep', \n",
    "    'JanTmin:PcumOctSep', 'JanTmin:PPT', 'MarTmin:TMarAug', \n",
    "    'MarTmin:AugTmax', 'MarTmin:summerP0', 'MarTmin:OctTmin', \n",
    "    'MarTmin:fallTmean', 'MarTmin:winterTmin', 'MarTmin:Tmin', \n",
    "    'MarTmin:Tmean', 'MarTmin:TOctSep', 'MarTmin:summerP1', \n",
    "    'MarTmin:summerP2', 'TMarAug:summerP0', 'TMarAug:Tmean', \n",
    "    'TMarAug:TOctSep', 'TMarAug:summerP2', 'summerTmean:Tmean', \n",
    "    'summerTmean:TOctSep', 'summerTmean:Pmean', 'summerTmean:PPT', \n",
    "    'AugTmean:Tmean', 'AugTmean:TOctSep', 'AugTmean:PPT', \n",
    "    'AugTmax:PMarAug', 'AugTmax:summerP0', 'AugTmax:fallTmean', \n",
    "    'AugTmax:Tmean', 'AugTmax:TOctSep', 'AugTmax:summerP1', \n",
    "    'AugTmax:summerP2', 'AugTmax:Pmean', 'AugTmax:POctSep', \n",
    "    'AugTmax:PcumOctSep', 'AugTmax:PPT', 'GSP:Tvar', 'GSP:Pmean', \n",
    "    'GSP:POctSep', 'GSP:PcumOctSep', 'GSP:PPT', 'PMarAug:Tvar', \n",
    "    'PMarAug:summerP1', 'PMarAug:summerP2', 'PMarAug:Pmean', \n",
    "    'PMarAug:POctSep', 'PMarAug:PcumOctSep', 'PMarAug:PPT', \n",
    "    'summerP0:OctTmin', 'summerP0:fallTmean', 'summerP0:winterTmin', \n",
    "    'summerP0:Tmin', 'summerP0:Tmean', 'summerP0:TOctSep', \n",
    "    'summerP0:summerP1', 'summerP0:summerP2', 'OctTmin:summerP1', \n",
    "    'OctTmin:summerP2', 'fallTmean:winterTmin', 'fallTmean:Tmin', \n",
    "    'fallTmean:Tmean', 'fallTmean:TOctSep', 'fallTmean:summerP1', \n",
    "    'fallTmean:summerP2', 'winterTmin:Tmin', 'winterTmin:Tmean', \n",
    "    'winterTmin:TOctSep', 'winterTmin:summerP1', 'winterTmin:summerP2', \n",
    "    'winterTmin:Pmean', 'winterTmin:POctSep', 'winterTmin:PcumOctSep', \n",
    "    'winterTmin:PPT', 'Tmin:Tmean', 'Tmin:TOctSep', 'Tmin:summerP1', \n",
    "    'Tmin:summerP2', 'Tmin:POctSep', 'Tmin:PcumOctSep', 'Tmin:PPT', \n",
    "    'Tmean:TOctSep', 'Tmean:summerP1', 'Tmean:summerP2', 'Tvar:Pmean', \n",
    "    'Tvar:POctSep', 'Tvar:PcumOctSep', 'Tvar:PPT', 'TOctSep:summerP1', \n",
    "    'TOctSep:summerP2', 'summerP1:summerP2', 'summerP1:Pmean', \n",
    "    'summerP1:POctSep', 'summerP1:PcumOctSep', 'summerP1:PPT', \n",
    "    'summerP2:Pmean', 'summerP2:PPT', 'Pmean:POctSep', 'Pmean:PcumOctSep',\n",
    "    'Pmean:PPT', 'POctSep:PcumOctSep', 'POctSep:PPT', 'PcumOctSep:PPT']\n",
    "\n",
    "# check for typos in above\n",
    "for term in SQUARE + CUBE + INTERACTIONS:\n",
    "    for t in term.split(':'):\n",
    "        if t not in list(X_train):\n",
    "            print(t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def add_squares(data_set):\n",
    "    print('Adding quadratic terms...')\n",
    "    for field in SQUARE:\n",
    "        if field in list(data_set):\n",
    "            data_set['%s_sq' % field] = data_set[field] ** 2\n",
    "    return data_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def add_cubes(data_set):\n",
    "    print('Adding cubic terms...')    \n",
    "    for field in CUBE:\n",
    "        if field in list(data_set):\n",
    "            data_set['%s_cub' % field] = data_set[field] ** 3\n",
    "    return data_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def add_interactions(data_set):\n",
    "    print('Adding interactions...')\n",
    "    for field in INTERACTIONS:\n",
    "        f1, f2 = field.split(':')\n",
    "        if f1 in data_set and f2 in data_set:\n",
    "            data_set[field] = data_set[f1] * data_set[f2]\n",
    "    return data_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def add_all_cols(data_set):\n",
    "    data_set = add_squares(data_set)\n",
    "    data_set = add_cubes(data_set)\n",
    "    data_set = add_interactions(data_set)\n",
    "    return data_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Adding quadratic terms...\n",
      "Adding cubic terms...\n",
      "Adding interactions...\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Tmean</th>\n",
       "      <th>age</th>\n",
       "      <th>lat</th>\n",
       "      <th>lon</th>\n",
       "      <th>lon_sq</th>\n",
       "      <th>lat_sq</th>\n",
       "      <th>age_sq</th>\n",
       "      <th>Tmean_sq</th>\n",
       "      <th>age_cub</th>\n",
       "      <th>lon:lat</th>\n",
       "      <th>lat:Tmean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>-2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>-8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>36</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>27</td>\n",
       "      <td>18</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Tmean  age  lat  lon  lon_sq  lat_sq  age_sq  Tmean_sq  age_cub  lon:lat  \\\n",
       "0      0   -2    4    1       1      16       4         0       -8        4   \n",
       "1      1    2    5    2       4      25       4         1        8       10   \n",
       "2      5    3    6    3       9      36       9        25       27       18   \n",
       "\n",
       "   lat:Tmean  \n",
       "0          0  \n",
       "1          5  \n",
       "2         30  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test = pd.DataFrame({'lon': [1, 2, 3], \n",
    "                     'lat': [4, 5, 6], \n",
    "                     'age': [-2, 2, 3], \n",
    "                     'Tmean': [0, 1, 5]})\n",
    "test = add_all_cols(test)\n",
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#X_train.loc[0, :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#X_train.loc[np.isnan(X_train['density']) == False, :].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def fill_na(df, field):\n",
    "    '''\n",
    "    Fills value by taking the average of cells above and below (or just \n",
    "    one if both not available)\n",
    "    '''\n",
    "    print('Attempting to fill NAs with average of neighboring cells.')\n",
    "    iterations = 0\n",
    "    while sum(np.isnan(df[field])):\n",
    "        for i in range(df.shape[0]):\n",
    "            if np.isnan(df.loc[i, field]):\n",
    "                use = []\n",
    "                x = int(df.loc[i, 'x'])\n",
    "                x_above = int(df.loc[i - 1, 'x']) if i > 0 else np.nan\n",
    "                x_below = (int(df.loc[i + 1, 'x']) if i < df.shape[0] - 1 \n",
    "                           else np.nan)\n",
    "                if abs(x - x_above) == 1:\n",
    "                    use.append(x_above)\n",
    "                if abs(x - x_below) == 1:\n",
    "                    use.append(x_below)\n",
    "                if len(use):\n",
    "                    df.loc[i, field] = np.mean(use)\n",
    "        iterations += 1\n",
    "        if iterations > 2:\n",
    "            print('Could not fill %s for %d rows.' \n",
    "                  % (field, sum(np.isnan(df[field]))))\n",
    "            return df\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "704"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(np.isnan(X_train['density']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#X_train = X_train.loc[np.isnan(X_train['density']) == False, :]\n",
    "#sum(np.isnan(X_train['density']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Attempting to fill NAs with average of neighboring cells.\n",
      "Could not fill density for 6 rows.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_test = fill_na(X_train, 'density')\n",
    "sum(np.isnan(X_train_test['density']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def construct_model_matrices():\n",
    "    train_X_files = sorted(\n",
    "        [f for f in os.listdir(DATA_DIR) if 'X_train' in f])\n",
    "    valid_X_files = sorted(\n",
    "        [f for f in os.listdir(DATA_DIR) if 'X_valid' in f])\n",
    "    test_X_files  = sorted(\n",
    "        [f for f in os.listdir(DATA_DIR) if 'X_test' in f])\n",
    "    train_y_files = sorted(\n",
    "        [f for f in os.listdir(DATA_DIR) if 'y_train' in f])\n",
    "    valid_y_files = sorted(\n",
    "        [f for f in os.listdir(DATA_DIR) if 'y_valid' in f])\n",
    "    test_y_files  = sorted(\n",
    "        [f for f in os.listdir(DATA_DIR) if 'y_test' in f])\n",
    "    print('Train:\\n ', train_X_files, '\\n ', train_y_files)\n",
    "    print('Valid:\\n ', valid_X_files, '\\n ', valid_y_files)\n",
    "    print('Test:\\n ',  test_X_files,  '\\n ', test_y_files)\n",
    "    \n",
    "    X_train = load_data_set(train_X_files)\n",
    "    X_valid = load_data_set(valid_X_files)\n",
    "    X_test  = load_data_set(test_X_files)\n",
    "    y_train = load_data_set(train_y_files)\n",
    "    y_valid = load_data_set(valid_y_files)\n",
    "    y_test  = load_data_set(test_y_files)\n",
    "    data_sets = [\n",
    "        [X_train, y_train], [X_valid, y_valid], [X_test, y_test]]    \n",
    "    \n",
    "    for i, [X, y] in enumerate(data_sets):\n",
    "        #data_sets[i] = [fill_na(X, 'density'), y]\n",
    "        #data_sets[i] = X.loc[np.isnan(X['density']) == False, :]\n",
    "        #data_sets[i] = [add_all_cols(X), y]\n",
    "        X = X.reindex()\n",
    "        y = y.reindex()\n",
    "        X = fill_na(X, 'density')\n",
    "        y = y.loc[np.isnan(X['density']) == False, :]\n",
    "        X = X.loc[np.isnan(X['density']) == False, :]\n",
    "        X = add_all_cols(X.copy())\n",
    "        X = X.reindex()\n",
    "        y = y.reindex()\n",
    "        data_sets[i] = [X, y]\n",
    "    return data_sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train:\n",
      "  ['X_train_2003.csv', 'X_train_2009.csv'] \n",
      "  ['y_train_2003.csv', 'y_train_2009.csv']\n",
      "Valid:\n",
      "  ['X_valid_2003.csv', 'X_valid_2009.csv'] \n",
      "  ['y_valid_2003.csv', 'y_valid_2009.csv']\n",
      "Test:\n",
      "  ['X_test_2003.csv', 'X_test_2009.csv'] \n",
      "  ['y_test_2003.csv', 'y_test_2009.csv']\n",
      "Loading data from ['X_train_2003.csv', 'X_train_2009.csv']...\n",
      "Loading data from ['X_valid_2003.csv', 'X_valid_2009.csv']...\n",
      "Loading data from ['X_test_2003.csv', 'X_test_2009.csv']...\n",
      "Loading data from ['y_train_2003.csv', 'y_train_2009.csv']...\n",
      "Loading data from ['y_valid_2003.csv', 'y_valid_2009.csv']...\n",
      "Loading data from ['y_test_2003.csv', 'y_test_2009.csv']...\n",
      "Attempting to fill NAs with average of neighboring cells.\n",
      "Could not fill density for 6 rows.\n",
      "Adding quadratic terms...\n",
      "Adding cubic terms...\n",
      "Adding interactions...\n",
      "Attempting to fill NAs with average of neighboring cells.\n",
      "Could not fill density for 28 rows.\n",
      "Adding quadratic terms...\n",
      "Adding cubic terms...\n",
      "Adding interactions...\n",
      "Attempting to fill NAs with average of neighboring cells.\n",
      "Could not fill density for 18 rows.\n",
      "Adding quadratic terms...\n",
      "Adding cubic terms...\n",
      "Adding interactions...\n"
     ]
    }
   ],
   "source": [
    "data_sets = construct_model_matrices()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "0\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "print(sum(np.isnan(data_sets[0][0]['density'])))\n",
    "print(sum(np.isnan(data_sets[1][0]['density'])))\n",
    "print(sum(np.isnan(data_sets[2][0]['density'])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Check\n",
    "#list(data_sets[0][0])\n",
    "#list(data_sets[0][1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#data_sets[0][0].head()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
